// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2022 13:16:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Register8bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Register8bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg CLK;
reg D;
reg E;
reg F;
reg G;
reg H;
reg Load;
reg Reset;
// wires                                               
wire QA;
wire QB;
wire QC;
wire QD;
wire QE;
wire QF;
wire QG;
wire QH;

// assign statements (if any)                          
Register8bit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CLK(CLK),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.H(H),
	.Load(Load),
	.QA(QA),
	.QB(QB),
	.QC(QC),
	.QD(QD),
	.QE(QE),
	.QF(QF),
	.QG(QG),
	.QH(QH),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// A
initial
begin
	A = 1'b1;
	A = #240000 1'b0;
end 

// B
initial
begin
	B = 1'b1;
	B = #240000 1'b0;
end 

// C
initial
begin
	C = 1'b1;
	C = #440000 1'b0;
end 

// D
initial
begin
	D = 1'b1;
	D = #440000 1'b0;
end 

// E
initial
begin
	E = 1'b1;
	E = #440000 1'b0;
end 

// F
initial
begin
	F = 1'b1;
	F = #440000 1'b0;
end 

// G
initial
begin
	G = 1'b1;
	G = #240000 1'b0;
	G = #200000 1'b1;
	G = #190000 1'b0;
end 

// H
initial
begin
	H = 1'b1;
	H = #240000 1'b0;
	H = #200000 1'b1;
	H = #190000 1'b0;
end 

// Load
initial
begin
	Load = 1'b0;
	Load = #670000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #100000 1'b1;
	#100000;
end 
endmodule

