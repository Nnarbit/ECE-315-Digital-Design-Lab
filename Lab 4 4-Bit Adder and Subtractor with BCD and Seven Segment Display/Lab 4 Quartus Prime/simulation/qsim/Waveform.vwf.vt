// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2022 15:08:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg A2;
reg A3;
reg A4;
reg B1;
reg B2;
reg B3;
reg B4;
reg SA;
reg SB;
// wires                                               
wire D00;
wire D01;
wire D02;
wire D03;
wire D04;
wire D05;
wire D06;
wire D10;
wire D11;
wire D12;
wire D13;
wire D14;
wire D15;
wire D16;
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S5;
wire S6;

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.D00(D00),
	.D01(D01),
	.D02(D02),
	.D03(D03),
	.D04(D04),
	.D05(D05),
	.D06(D06),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.D16(D16),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.SA(SA),
	.SB(SB)
);
initial 
begin 
#1000000 $finish;
end 

// A4
initial
begin
	A4 = 1'b1;
	A4 = #240000 1'b0;
	A4 = #180000 1'b1;
	A4 = #180000 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #800000 1'b1;
end 

// A2
initial
begin
	A2 = 1'b1;
	A2 = #240000 1'b0;
	A2 = #180000 1'b1;
	A2 = #380000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b1;
	B3 = #240000 1'b0;
	B3 = #180000 1'b1;
end 

// B2
initial
begin
	B2 = 1'b0;
	B2 = #800000 1'b1;
end 

// B1
initial
begin
	B1 = 1'b1;
	B1 = #600000 1'b0;
	B1 = #200000 1'b1;
end 

// SA
initial
begin
	SA = 1'b1;
	SA = #240000 1'b0;
end 

// SB
initial
begin
	SB = 1'b1;
	SB = #420000 1'b0;
	SB = #380000 1'b1;
end 
endmodule

